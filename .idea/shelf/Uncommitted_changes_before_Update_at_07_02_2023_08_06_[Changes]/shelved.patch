Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.10 (console_awp)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 71c70e90df9ac8a2ca1ff990b8c56bd9c8abefbe)
+++ b/.idea/misc.xml	(date 1674412907541)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (console_awp)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11 (console_awp)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: FillForm.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from fpdf import FPDF\r\nfrom PyPDF2 import PdfFileWriter, PdfFileReader\r\n\r\n\r\nclass FillForm:\r\n\r\n    def __init__(self, form_name, coord_db, collected_data):\r\n\r\n        self.line = None  # container for generator result\r\n        self.form_name = form_name\r\n        self.coord_db = coord_db\r\n        self.collected_data = collected_data\r\n        self.overlay_pdf_file_name = f'temp/{self.form_name}_overlay_PDF.pdf'\r\n        self.pdf_template_file_name = f'forms/{self.form_name}.pdf'\r\n        self.result_pdf_file_name = f'output/{self.form_name}.pdf'\r\n\r\n        # prepare PDF file\r\n        self.pdf = FPDF(format='letter', unit='pt')\r\n        self.pdf.add_font('DejaVu', fname='fonts/DejaVuSansCondensed.ttf')  # UTF-8 font - accepts polish signs\r\n        self.pdf.set_font('DejaVu', size=11)\r\n\r\n    ############ TRANSFORM p_no with spaces to fill detain form\r\n    def transform_p(self, p_no):\r\n        add = \" \"\r\n        pesel = f\"{p_no[0] + add + add + p_no[1] + add + add + add}\"\r\n        pesel += f\"{p_no[2] + add + add + p_no[3] + add + add + p_no[4]}\"\r\n        pesel += f\"{add + add + p_no[5] + add + add + p_no[6] + add + add}\"\r\n        pesel += f\"{p_no[7] + add + add + add + p_no[8] + add + add + p_no[9]}\"\r\n        pesel += f\"{add + add + p_no[10]}\"\r\n        return pesel\r\n\r\n    def num_pages(self):\r\n        return len(list(self.coord_db[self.form_name].keys()))\r\n\r\n    def generate_form_positions(self, page):\r\n        # CREATES GENERATOR\r\n        # iteration trough pages in form\\\r\n        for k, v in self.coord_db[self.form_name][f'page{page}'].items():\r\n            yield k, v\r\n\r\n    def set_form_positions(self):\r\n        # iterate trough pages\r\n        for pages in range(self.num_pages()):\r\n\r\n            # create a generator for each field position and resets it after every page\r\n            self.line = iter(self.generate_form_positions(pages))\r\n            self.pdf.add_page()\r\n\r\n            # this loop place values in right coords, there's alot of \"elif\" because of customization of every form\r\n            # which has different place/cell/multi_cell logic\r\n            while True:\r\n                try:\r\n                    # gets key, value_xy from generator\r\n                    key, value_xy = next(self.line)\r\n\r\n                except StopIteration:\r\n                    break\r\n\r\n                if key == '79_basis':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data[key], border=0)\r\n\r\n                # DETAIN FORM\r\n                # detain_hour\r\n                elif self.form_name == 'detain' and key == 'hd':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['detain_time'][0], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'hj':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['detain_time'][1], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'hmd':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['detain_time'][3], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'hmj':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['detain_time'][4], border=0)\r\n\r\n                #detain_date\r\n                # day\r\n                elif self.form_name == 'detain' and key == 'ddd':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['detain_date'][0], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'ddj':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['detain_date'][1], border=0)\r\n\r\n                # month\r\n                elif self.form_name == 'detain' and key == 'dmd':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['detain_date'][3], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'dmj':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['detain_date'][4], border=0)\r\n\r\n                # year\r\n                elif self.form_name == 'detain' and key == 'dyt':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['detain_date'][6], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'dys':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['detain_date'][7], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'dyd':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['detain_date'][8], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'dyj':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['detain_date'][9], border=0)\r\n\r\n#####################\r\n                # doc_time\r\n                elif self.form_name == 'detain' and key == 'doc_hd':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_time'][0], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'doc_hj':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_time'][1], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'doc_hmd':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_time'][3], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'doc_hmj':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_time'][4], border=0)\r\n\r\n                # doc_date\r\n                # day\r\n                elif self.form_name == 'detain' and key == 'doc_ddd':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][0], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'doc_ddj':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][1], border=0)\r\n\r\n                # month\r\n                elif self.form_name == 'detain' and key == 'doc_dmd':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][3], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'doc_dmj':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][4], border=0)\r\n\r\n                # year\r\n                elif self.form_name == 'detain' and key == 'doc_dyt':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][6], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'doc_dys':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][7], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'doc_dyd':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][8], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'doc_dyj':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][9], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'detain_basis':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(483, 12, txt=' '*35 + self.collected_data[key], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'rights':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(483, 12, txt=' '*11 + self.collected_data[key], border=0)\r\n\r\n                # end_time_hour\r\n                elif self.form_name == 'detain' and key == 'ehd':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_time'][0], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'ehj':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_time'][1], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'emd':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_time'][3], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'emj':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_time'][4], border=0)\r\n\r\n                # end_doc_date\r\n                # day\r\n                elif self.form_name == 'detain' and key == 'eddd':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][0], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'eddj':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][1], border=0)\r\n\r\n                # month\r\n                elif self.form_name == 'detain' and key == 'edmd':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][3], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'edmj':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][4], border=0)\r\n\r\n                # year\r\n                elif self.form_name == 'detain' and key == 'edyt':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][6], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'edys':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][7], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'edyd':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][8], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'edyj':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(490, 10, txt=self.collected_data['doc_date'][9], border=0)\r\n\r\n                ######################\r\n\r\n                elif key == 'act_description':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(280, 10, txt=self.collected_data[key], border=0)\r\n\r\n                elif self.form_name == '79' and key == 'doc_date':\r\n                    self.pdf.set_xy((value_xy[0]+(len(self.collected_data['doc_city'])*7)), value_xy[1])\r\n                    self.pdf.cell(50, 15, txt=self.collected_data[key], border=0)\r\n\r\n                elif self.form_name == 'warrant' and key == 'doc_date':\r\n                    self.pdf.set_xy((value_xy[0]+(len(self.collected_data['doc_city'])*7)), value_xy[1])\r\n                    self.pdf.cell(50, 15, txt=self.collected_data[key], border=0)\r\n\r\n                elif self.form_name == 'warrant' and key == 'doc_time':\r\n                    self.pdf.set_xy((value_xy[0]+(len(self.collected_data['doc_date'])*7+(len(self.collected_data['doc_city'])*7))), value_xy[1])\r\n                    self.pdf.cell(50, 15, txt=self.collected_data[key], border=0)\r\n\r\n                elif self.form_name == 'rej' and key == 'doc_date':\r\n                    self.pdf.set_xy((value_xy[0]+(len(self.collected_data['doc_city'])*7)), value_xy[1])\r\n                    self.pdf.cell(50, 15, txt=self.collected_data[key], border=0)\r\n\r\n                elif self.form_name == 'rej' and key == 'victim':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(280, 10, txt=self.collected_data[key], border=0)\r\n\r\n                elif self.form_name == 'rej' and key == 'subject':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.multi_cell(280, 10, txt=self.collected_data[key], border=0)\r\n\r\n                elif self.form_name == 'detain' and key == 'p_no':\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.cell(50, 15, txt=self.transform_p(self.collected_data[key]), border=0)\r\n\r\n                elif key[-1] != '2' and key[-1] != '3':\r\n                    # sets x,y with text from dictionary by key\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.cell(50, 15, txt=self.collected_data[key], border=0)\r\n\r\n                else:\r\n                    self.pdf.set_xy(value_xy[0], value_xy[1])\r\n                    self.pdf.cell(50, 15, txt=self.collected_data[key[0:-1]], border=0)\r\n\r\n            # add blank page to manage two-side print in real life printer (in forms that have only one page)\r\n            if self.form_name == '79':\r\n                self.pdf.add_page()\r\n            if self.form_name == 'warrant':\r\n                self.pdf.add_page()\r\n\r\n        # save to file with all pages\r\n        self.pdf.output(self.overlay_pdf_file_name)\r\n\r\n        # rest\r\n        pdf_template = PdfFileReader(open(self.pdf_template_file_name, 'rb'))\r\n\r\n        # Open your overlay PDF that was created earlier\r\n        overlay_pdf = PdfFileReader(open(self.overlay_pdf_file_name, 'rb'))\r\n\r\n        # Write the result to a new PDF file\r\n        output_pdf = PdfFileWriter()\r\n\r\n        for i in range(self.num_pages()):\r\n            # Get the first page from the template\r\n            template_page = pdf_template.getPage(i)\r\n            # Merge the overlay page onto the template page\r\n            template_page.mergePage(overlay_pdf.getPage(i))\r\n            output_pdf.addPage(template_page)\r\n\r\n        output_pdf.write(open(self.result_pdf_file_name, \"wb\"))
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FillForm.py b/FillForm.py
--- a/FillForm.py	(revision 71c70e90df9ac8a2ca1ff990b8c56bd9c8abefbe)
+++ b/FillForm.py	(date 1674412907530)
@@ -54,6 +54,7 @@
                     key, value_xy = next(self.line)
 
                 except StopIteration:
+
                     break
 
                 if key == '79_basis':
